# -*- coding: utf-8 -*-
"""DataAnalyticsProject (2) new.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PoZw9J1noApDa8W01XFCSkyXM4vgCady
"""

import pandas as pd

#import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objs as go#graph_objs: This is a submodule within the Plotly library that provides classes and functions for creating graphical objects like traces, layouts, annotations, and shapes.
import plotly.express as px #provides a high-level interface for creating various types of plots with minimal code.
import plotly.io as pio # This is a submodule within the Plotly library that provides functionalities related to input and output operations, such as saving plots to different file formats (e.g., HTML, PNG, SVG) or displaying them in different environments (e.g., Jupyter notebooks, web browsers).
pio.templates.default = 'plotly_white'
from statsmodels.tsa.arima.model import ARIMA #ARIMA stands for AutoRegressive Integrated Moving Average. It is a widely used statistical method for analyzing and forecasting time series data.
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# read the files
dim_date=pd.read_csv("/content/dim_date.csv")
dim_hotels=pd.read_csv("/content/dim_hotels.csv")
dim_rooms=pd.read_csv("/content/dim_rooms.csv")
fact_aggregated_bookings=pd.read_csv("/content/fact_aggregated_bookings.csv")
fact_bookings=pd.read_csv("/content/fact_bookings.csv")

"""# ***Data Exploration***
**1. dim_date.csv**

"""

# First Five rows of dim_date.csv
dim_date.head()

# dimensions of dim_date.csv
dim_date.shape

# info
dim_date.info()

# checking null values
dim_date.isnull().sum()

"""# we are modifying day_type column and adding week no column"""

# Convert 'date' column to datetime objects
dim_date['date'] = pd.to_datetime(dim_date['date'])
dim_date['week_number']=dim_date['week no']
#create a column consists of weeknumber
for i in range(len(dim_date['week no'])):
  dim_date['week_number'][i]=int(dim_date['week no'][i][2:])

# modify the day_type column
dim_date['day_type'] = dim_date['date'].apply(lambda x: 'Weekend' if (x.weekday() ==5 or x.weekday()==4) else 'Weekday')
print(dim_date.head(10))

# value counts of day_type column in dim_date.csv
dim_date.day_type.value_counts()

# value counts of week_number column in dim_date.csv
dim_date.week_number.value_counts()

"""**2. dim_hotels.csv**"""

# first 5 rows of dim_hotels.csv
dim_hotels.head()

# dimensions of dim_hotels.csv
dim_hotels.shape

# information of dim_hotels.csv
dim_hotels.info()

# finding null values in dim_hotels.csv
dim_hotels.isnull().sum()

# visualize the value counts of property_name in dim_hotels.csv
dim_hotels.property_name.value_counts().plot(kind='bar')

# visualize the value counts of category in dim_hotels.csv
dim_hotels.category.value_counts().plot(kind='bar')

# visualize the value counts of city in dim_hotels.csv
dim_hotels.city.value_counts().plot(kind='bar')

"""**3. dim_rooms.csv**"""

# display first 5 rows of dim_rooms.csv
dim_rooms.head()

"""**4. fact_aggregated_bookings.csv**"""

# displaying the first 5 rows of fact_aggregated_bookings.csv
fact_aggregated_bookings.head()

# dimensions of fact_aggregated_bookings.csv
fact_aggregated_bookings.shape

# information of fact_aggregated_bookings.csv
fact_aggregated_bookings.info()

# value counts of property_id column in fact_aggregated_bookings.csv
fact_aggregated_bookings.property_id.value_counts()

#visualizing value counts of room_category column in fact_aggregated_bookings.csv
fact_aggregated_bookings.room_category.value_counts().plot(kind='bar')

# checking for null values in each column
fact_aggregated_bookings.isnull().sum()

"""**5. fact_bookings.csv**"""

# first 5 rows of fact_bookings.csv
fact_bookings.head()

# dimensions of fact_bookings.csv
fact_bookings.shape

# information about fact_bookings.csv
fact_bookings.info()

# checking null values in fact_bookings data frame
fact_bookings.isnull().sum()

# visualizing the value counts of ratings_given column in fact_bookings data frame
fact_bookings.ratings_given.value_counts().plot(kind='bar')

# visualizing the value counts of booking_status column in fact_bookings data frame
fact_bookings.booking_status.value_counts().plot(kind='bar')

# visualizing the value counts of booking_platform column in fact_bookings data frame
fact_bookings.booking_platform.value_counts().plot(kind="bar")

# describing the fact_bookings dataframe
fact_bookings.describe()

# max,min revenue generated
fact_bookings.revenue_generated.min(),fact_bookings.revenue_generated.max()

"""# ***Data Cleaning***

**1. fact_bookings Dataframe**
"""

# Filter the dataset to find bookings where the number of guests is less than zero
fact_bookings[fact_bookings.no_guests<0]

#dimension of fact_bookings Dataframe
fact_bookings.shape

# Remove rows where the number of guests is zero or negative
fact_bookings = fact_bookings[fact_bookings.no_guests>0]

# Calculate the mean (average) and standard deviation of revenue generated
avg , std = fact_bookings.revenue_generated.mean() , fact_bookings.revenue_generated.std()
avg,std

# Calculate and display the higher limit for revenue generated, defined as the mean plus three times the standard deviation
higher_limit = avg + 3*std
higher_limit

# Calculate and display the lower limit for revenue generated, defined as the mean minus three times the standard deviation
lower_limit = avg - 3*std
lower_limit

# Filter the dataset to find bookings where the revenue generated is less than the lower limit
fact_bookings[fact_bookings.revenue_generated<lower_limit]

# Find bookings where the revenue generated is greater than the higher limit
fact_bookings[fact_bookings.revenue_generated>higher_limit]

# Remove rows where the revenue generated is greater than the higher limit
fact_bookings = fact_bookings[fact_bookings.revenue_generated < higher_limit]

fact_bookings.shape

#Imputes missing values in the 'ratings_given' column of the 'fact_bookings' DataFrame with the mean of non-missing values using NumPy's nanmean function.
import numpy as np
fact_bookings['ratings_given'].fillna(np.nanmean(fact_bookings['ratings_given']), inplace=True)

fact_bookings.isnull().sum()

"""**fact_aggregated_bookings Dataframe**"""

#describe the dataframe
fact_aggregated_bookings.describe()

# check null values
fact_aggregated_bookings.isnull().sum()

#Filters the 'fact_aggregated_bookings' DataFrame to include rows where the number of 'successful_bookings' is greater than the 'capacity'.
fact_aggregated_bookings[fact_aggregated_bookings.successful_bookings > fact_aggregated_bookings.capacity]

"""# ***Data Transformation***"""

fact_aggregated_bookings.head()

# occupancy%=total_successfull_bookings/capacity
fact_aggregated_bookings['occupancy%']=(fact_aggregated_bookings.successful_bookings/fact_aggregated_bookings.capacity)*100
fact_aggregated_bookings.head()

"""# ***Merging Data i.e. merging dim_dates, dim_hotels,dim_rooms,fact_aggregated_bookings Dataframes***"""

fact_aggregated_bookings.head()

dim_date.head()

dim_rooms.head()

dim_hotels.head()

#merge fact_aggregated_bookings,dim_rooms Dataframes
df=pd.merge(fact_aggregated_bookings,dim_rooms,left_on="room_category",right_on="room_id")
df.head()

# Merge df, dim_hotels Dataframes
df=pd.merge(dim_hotels,df,on='property_id')
df.head()

df['check_in_date'] = pd.to_datetime(df['check_in_date'])
df=pd.merge(df,dim_date,left_on="check_in_date", right_on="date")
df.head()

df.drop("room_id",axis=1,inplace=True)
df.head()

df.info()

"""# ***Data Ingestion on merged Dataframe df***

**1. How does the occupancy percentage vary across different room classes in the hotel?**
"""

# class wise occupancy percentage
class_occupancy_per=df.groupby("room_class")['occupancy%'].mean().round(2)

import plotly.express as px
fig = px.bar(class_occupancy_per,
             title="Class Wise Occupancy Percentage",
             labels={'room_class': 'Room Class', 'occupancy%': 'Occupancy Percentage'},
             color_discrete_sequence=px.colors.qualitative.Prism)
fig.show()

#Using dataframe fact_aggregated_bookings: suggest a plot using plotly library
import plotly.express as px
fig = px.scatter(df, x="check_in_date", y="occupancy%", color="room_category", title="Occupancy Rate by Room Category and Check-in Date")
fig.show()

"""***Merging Data i.e. merging dim_dates, dim_hotels,dim_rooms,fact_bookings Dataframes***"""

fact_bookings.head()

#merge fact_aggregated_bookings,dim_rooms Dataframes
df_2=pd.merge(fact_bookings,dim_rooms,left_on="room_category",right_on="room_id")
# Merge df, dim_hotels Dataframes
df_2=pd.merge(dim_hotels,df_2,on='property_id')
df_2['check_in_date'] = pd.to_datetime(df_2['check_in_date'])
df_2=pd.merge(df_2,dim_date,left_on="check_in_date", right_on="date")
df_2.head()

df_2.info()

# Convert booking_date and checkout_date to datetime
df_2['booking_date'] = pd.to_datetime(df_2['booking_date'])
df_2['checkout_date'] = pd.to_datetime(df_2['checkout_date'])

# Add Month and Year
df_2['booking_month'] = df_2['booking_date'].dt.month
df_2['booking_year'] = df_2['booking_date'].dt.year

# Add Booking Duration
df_2['booking_duration'] = (df_2['checkout_date'] - df_2['check_in_date']).dt.days

# Add Revenue per Guest
df_2['revenue_per_guest'] = df_2['revenue_generated'] / df_2['no_guests']

# Add Day of Week
df_2['booking_day_of_week'] = df_2['booking_date'].dt.day_name()

# Add Booking Lead Time
df_2['lead_time'] = (df_2['check_in_date'] - df_2['booking_date']).dt.days

df_2.head()

# Calculate Total Revenue
total_revenue = df_2['revenue_realized'].sum()

# Calculate Total Bookings
total_bookings = len(df_2)

# # Calculate Total Capacity
# occupancy%=df_2.groupby("room_class")['occupancy%'].mean().round(2)

# Calculate Total Successful Bookings
total_successful_bookings = df_2[df_2['booking_status'] == 'Successful']['booking_id'].count()

# Calculate Occupancy %
# occupancy_percentage = (total_successful_bookings / total_capacity) * 100

# Calculate Average Rating
average_rating = df_2['ratings_given'].mean()

# Calculate No of days
total_days = len(pd.date_range(start=df_2['booking_date'].min(), end=df_2['booking_date'].max()))

# Calculate Total Cancelled Bookings
total_cancelled_bookings = df_2[df_2['booking_status'] == 'Cancelled']['booking_id'].count()

# Calculate Cancellation %
cancellation_percentage = (total_cancelled_bookings / total_bookings) * 100

# Calculate Total Checked Out
total_checked_out = df_2[df_2['booking_status'] == 'Checked Out']['booking_id'].count()

# Calculate Total No Show Bookings
total_no_show_bookings = df_2[df_2['booking_status'] == 'No Show']['booking_id'].count()

# Calculate No Show rate %
no_show_rate_percentage = (total_no_show_bookings / total_bookings) * 100

# Calculate ADR (Average Daily Rate)
adr = total_revenue / total_successful_bookings

# Calculate Realisation %
realisation_percentage = (total_checked_out / total_bookings) * 100

# Calculate RevPAR (Revenue Per Available Room)
# revpar = total_revenue / total_capacity

# Calculate DBRN (Daily Booked Room Nights)
dbrn = total_successful_bookings / total_days

# Calculate DSRN (Daily Sellable Room Nights)
# dsrn = total_capacity / total_days

# Calculate DURN (Daily Utilized Room Nights)
durn = total_checked_out / total_days


# Calculate WoW Changes
revpw = df_2[df_2['week_number'] == 'previous']['revenue_realized'].sum()
revcw = df_2[df_2['week_number'] == 'current']['revenue_realized'].sum()

# revenue_wow_change_percentage = ((revcw - revpw) / revpw) * 100

# Similarly calculate WoW changes for other metrics like Occupancy, ADR, RevPAR, Realisation, DSRN, etc.

# Add these metrics as columns to the DataFrame
hotel_metrics = {
    'Total Revenue': total_revenue,
    'Total Bookings': total_bookings,
    # 'Total Capacity': total_capacity,
    'Total Successful Bookings': total_successful_bookings,
    # 'Occupancy %': occupancy_percentage,
    'Average Rating': average_rating,
    'No of days': total_days,
    'Total Cancelled Bookings': total_cancelled_bookings,
    'Cancellation %': cancellation_percentage,
    'Total Checked Out': total_checked_out,
    'Total No Show Bookings': total_no_show_bookings,
    'No Show rate %': no_show_rate_percentage,
    'ADR': adr,
    'Realisation %': realisation_percentage,
    # 'RevPAR': revpar,
    'DBRN': dbrn,
    # 'DSRN': dsrn,
    'DURN': durn,
    # 'Revenue WoW change %': revenue_wow_change_percentage
}

# Assuming you want to add these metrics as new columns to your existing DataFrame
for metric, value in hotel_metrics.items():
  df_2[metric] = value
df_2.info()

#df_2.drop('Revenue WoW change %',axis=1,inplace=True)

df_2.head()

df_2.info()

df_2['mmm yy'].value_counts()

"""# **Data Visualization** #"""

# Group DataFrame by 'weekno' and calculate total revenue for each week
weekly_revenue = df_2.groupby('week no')['revenue_realized'].sum().reset_index()
# Create a line plot for revenue over time per week
fig = go.Figure()
fig.add_trace(go.Scatter(x=weekly_revenue['week no'], y=weekly_revenue['revenue_realized'], mode='lines', name='Revenue'))
fig.update_layout(title='Revenue Over Time per Week', xaxis_title='Week Number', yaxis_title='Revenue')
fig.show()

# Create a box plot for booking duration vs revenue generated
fig = go.Figure()
fig.add_trace(go.Box(x=df_2['booking_duration'], y=df_2['revenue_generated'], name='Booking Duration vs Revenue'))
fig.update_layout(title='Booking Duration vs. Revenue Generated', xaxis_title='Booking Duration', yaxis_title='Revenue Generated')
fig.show()

# Calculate ADR (Average Daily Rate) per Room Category
df_2["ADR"] = df_2["Total Revenue"] / df_2["No of days"]
df_grouped = df_2.groupby('room_category')['ADR'].mean().reset_index()

# Create a plotly bar chart
fig = px.bar(df_grouped, x='room_category', y='ADR', title='Average Daily Rate by Room Category')

# Display the chart
fig.show()

#  Cancellation Rate Over Time
# Select columns for the plot
cancellation_rate_data = df_2[['date', 'Cancellation %']]

# Create the scatter plot
fig = px.scatter(cancellation_rate_data, x='date', y='Cancellation %', title='Cancellation Rate Over Time')

# Optional s (customize as needed)
fig.update_layout(xaxis_title='Date', yaxis_title='Cancellation Rate (%)')
fig.update_traces(marker_line_color='darkgray', marker_line_width=1)

# Display the plot
fig.show()

#  Revenue Distribution by Booking Platform

# Group data by Booking Platform and calculate total revenue
df_grouped = df_2.groupby('booking_platform')['Total Revenue'].sum().reset_index()

# Create a plotly pie chart
fig = px.pie(df_grouped, values='Total Revenue', names='booking_platform', title='Revenue Distribution by Booking Platform')

# Display the chart
fig.show()

#  Room Class Distribution of Bookings

# Count bookings by Room Class
df_grouped = df_2['room_class'].value_counts().reset_index(name='Count')

# Create a plotly bar chart
fig = px.bar(df_grouped, x='room_class', y='Count', title='Room Class Distribution of Bookings')

# Display the chart with rotation on x-axis labels for better readability with many categories
fig.update_xaxes(tickangle=45)  # Adjust angle if needed based on number of room classes
fig.show()

#  Rating Distribution

# Assuming a ratings column named 'ratings_given'
ratings_data = df_2['ratings_given']

# Create a plotly histogram with informative labels and title
fig = px.histogram(ratings_data, title='Ratings Distribution')

# Customize the axis labels for clarity
fig.update_xaxes(title_text='Rating')
fig.update_yaxes(title_text='Number of Bookings')

# Display the chart
fig.show()

# Revenue per Guest vs. Ratings Given

# Assuming columns named 'revenue_per_guest' and 'ratings_given'
fig = px.scatter(df_2, x='ratings_given', y='revenue_per_guest', title='Revenue per Guest vs. Ratings Given')

# Display the chart with informative axis labels
fig.update_xaxes(title_text='Ratings Given')
fig.update_yaxes(title_text='Revenue per Guest')
fig.show()

""" Box plot showing the distribution of occupancy percentages for each room category."""

plt.figure(figsize=(10, 6))
plt.boxplot(x = [df['occupancy%'][df['room_category'] == i] for i in df['room_category'].unique()], labels = df['room_category'].unique())
plt.xlabel('Room Category')
plt.ylabel('Occupancy Percentage')
plt.title('Box Plot of Occupancy Percentage by Room Category')
plt.show()

#Occupancy Percantage Distribution
fig = px.histogram(df, x='occupancy%', title='Occupancy Percentage Distribution')
fig.show()

#Successful Bookings by Room Category and City
fig = px.bar(df, x='room_category', y='successful_bookings', color='city', title='Successful Bookings by Room Category and City')
fig.show()

#Plot successful bookings vs. capacity by room class
fig = px.scatter(df, x='capacity', y='successful_bookings', color='room_class', title='Successful Bookings vs. Capacity by Room Class')
fig.show()

#Plot occupancy percentage over time by property
fig = px.line(df, x='date', y='occupancy%', color='property_name', title='Occupancy Percentage Over Time by Property')
fig.show()

#Plot occupancy percentage distribution by room class and city
fig = px.box(df, x='room_class', y='occupancy%', color='city', title='Occupancy Percentage Distribution by Room Class and City')
fig.show()

# Assuming heatmap_data is already defined
heatmap_data = df.pivot_table(index='city', columns='room_category', values='successful_bookings', aggfunc='sum')

# Define a custom color scale with red, black, and orange
custom_color_scale = [
    [0, 'red'],
    [0.5, 'black'],
    [1, 'orange']
]

# Create the heatmap with the custom color scale
fig2 = px.imshow(heatmap_data, aspect='auto', color_continuous_scale=custom_color_scale, title='Successful Bookings Heatmap')
fig2.show()

#line graph showing the trend of successful bookings for each day type (Weekday vs. Weekend) across different cities using ploly

fig = px.line(df, x="date", y="successful_bookings", color="day_type", line_dash="day_type",
              title="Trend of Successful Bookings by Day Type and City")
fig.update_layout(xaxis_title="Date", yaxis_title="Successful Bookings",
                  legend_title="Day Type")
fig.show()

#Occupancy Rates vs. Capacity Across Cities 3D Visualization
fig = px.scatter_3d(df, x='city', y='capacity', z='occupancy%', color='occupancy%',
                    title='Occupancy Rates vs. Capacity Across Cities',
                    color_continuous_scale='Viridis')
fig.update_layout(scene=dict(xaxis_title='City', yaxis_title='Capacity', zaxis_title='Occupancy Percentage'))
fig.show()

#Booking Success Rates by Room Category
fig = px.sunburst(df, path=['category', 'room_category'], values='successful_bookings',
                  title='Booking Success Rates by Room Category')
fig.update_layout(coloraxis_showscale=False)
fig.show()

# Booking Success by Occupancy, Capacity, & Category
fig = px.scatter_3d(df, x='occupancy%', y='successful_bookings', z='capacity', color='category',
                    title='Booking Success by Occupancy, Capacity, & Category',
                    labels={
                        'occupancy%': 'Occupancy Percentage',
                        'successful_bookings': 'Successful Bookings',
                        'capacity': 'Capacity'
                    })
fig.update_layout(scene = dict(
                    xaxis_title='Occupancy Percentage',
                    yaxis_title='Successful Bookings',
                    zaxis_title='Capacity'))

fig.show()
